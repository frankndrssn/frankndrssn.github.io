<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>340</fr:anchor><fr:taxon>Definition</fr:taxon><fr:addr>topo-0001</fr:addr><fr:route>topo-0001.xml</fr:route><fr:title>Topos</fr:title><fr:date><fr:year>2024</fr:year><fr:month>5</fr:month><fr:day>27</fr:day></fr:date><fr:authors><fr:author><fr:link
href="frankndrssn.xml"
type="local"
addr="frankndrssn">Frank Tsai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>An <fr:em><fr:strong>(elementary) topos</fr:strong></fr:em> is a finitely complete and cartesian closed category equipped with a subobject classifier.</fr:p></fr:mainmatter><fr:backmatter><fr:contributions></fr:contributions><fr:context></fr:context><fr:related></fr:related><fr:backlinks><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>336</fr:anchor><fr:taxon>Definition</fr:taxon><fr:addr>topo-0003</fr:addr><fr:route>topo-0003.xml</fr:route><fr:title>Geometric morphism</fr:title><fr:date><fr:year>2024</fr:year><fr:month>5</fr:month><fr:day>27</fr:day></fr:date><fr:authors><fr:author><fr:link
href="frankndrssn.xml"
type="local"
addr="frankndrssn">Frank Tsai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex>    \mathsf { E }  </fr:tex> and <fr:tex>    \mathsf { F }  </fr:tex> be <fr:link
href="topo-0001.xml"
type="local"
addr="topo-0001">topoi</fr:link>. A <fr:em><fr:strong>geometric morphism</fr:strong></fr:em> <fr:tex>{ f }:{     \mathsf { E }   } \to {     \mathsf { F }   }</fr:tex> is an adjoint pair of functors</fr:p>
 
  
  <fr:embedded-tex
hash="490d4ebf50c5560eb68aace8464c7bfb"><fr:embedded-tex-preamble>
    
   \RequirePackage {tikz}
   \RequirePackage {amsmath}
   \usetikzlibrary {backgrounds, intersections, calc, spath3, fit}

   \definecolor {catccolor}{RGB}{255,244,138}
   \tikzstyle {dot}=[circle, draw=black, fill=black, minimum size=1mm, inner sep=0mm]
   \tikzstyle {catc}=[catccolor!60]
   \tikzstyle {catd}=[orange!40]
   \tikzstyle {cate}=[red!40]
   \tikzstyle {catf}=[blue!10]
   \tikzstyle {catg}=[green!25]


   \tikzstyle {blue halo}=[fill=blue!10, opacity=0.7, rounded corners]
   \tikzstyle {white halo}=[fill=white, opacity=0.7, rounded corners]

   \NewDocumentCommand \CreateRect {D&lt;&gt;{} m m}{
     \path 
      coordinate (#1nw)
      ++(#2,-#3) coordinate (#1se)
      coordinate (#1sw) at (#1se -| #1nw)
      coordinate (#1ne) at (#1nw -| #1se)
    ;

     \path [spath/save = #1north] (#1nw) to (#1ne);
     \path [spath/save = #1west] (#1nw) to (#1sw);
     \path [spath/save = #1east] (#1ne) to (#1se);
     \path [spath/save = #1south] (#1sw) to (#1se);
  }
 
    
    \usepackage{tikz, tikz-cd, mathtools, amssymb, stmaryrd, quiver}
  \usetikzlibrary{matrix,arrows}
  \usetikzlibrary{backgrounds,fit,positioning,calc,shapes}
  \usetikzlibrary{decorations.pathreplacing}
  \usetikzlibrary{decorations.pathmorphing}
  \usetikzlibrary{decorations.markings}

  \tikzset{
    morphism/.style={font=\footnotesize,inner sep=2pt},
    desc/.style={morphism,sloped,fill=white},
    upright desc/.style={morphism,fill=white},
    pullback/.style = {
      append after command={
        \pgfextra{
          \draw ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
        }
      }
    },
    pullback 45/.style = {
      append after command={
        \pgfextra{
          \draw[rotate = 45] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
        }
      }
    },
    ne pullback/.style = {
      append after command={
        \pgfextra{
          \draw ($(\tikzlastnode) + (-.2cm,-.5cm)$) -- ++(-0.3cm,0) -- ++(0,0.3cm);
        }
      }
    },
    sw pullback/.style = {
      append after command={
        \pgfextra{
          \draw ($(\tikzlastnode) + (.2cm,.5cm)$) -- ++(0.3cm,0) -- ++(0,-0.3cm);
        }
      }
    },
    dotted pullback/.style = {
      append after command={
        \pgfextra{
          \draw [densely dotted] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
        }
      }
    },
    muted pullback/.style = {
      append after command={
        \pgfextra{
          \draw [gray] ($(\tikzlastnode) + (.2cm,-.5cm)$) -- ++(0.3cm,0) -- ++(0,0.3cm);
        }
      }
    },
    pushout/.style = {
      append after command={
        \pgfextra{
          \draw ($(\tikzlastnode) + (-.2cm,.5cm)$) -- ++(-0.3cm,0) -- ++(0,-0.3cm);
        }
      }
    },
    between/.style args={#1 and #2}{
      at = ($(#1)!0.5!(#2)$)
    },
    diagram/.style = {
      on grid,
      node distance=2cm,
      commutative diagrams/every diagram,
      line width = .5pt,
      every node/.append style = {
        commutative diagrams/every cell,
      }
    },
    fibration/.style = {
      -{Triangle[open]}
    },
    etale/.style = {
      -{Triangle[open]}
    },
    etale cover/.style= {
      &gt;={Triangle[open]},-&gt;.&gt;
    },
    opfibration/.style = {
      -{Triangle}
    },
    lies over/.style = {
      |-{Triangle[open]}
    },
    op lies over/.style = {
      |-{Triangle}
    },
    embedding/.style = {
      {right hook}-&gt;
    },
    open immersion/.style = {
      {right hook}-{Triangle[open]}
    },
    closed immersion/.style = {
      {right hook}-{Triangle}
    },
    closed immersion*/.style = {
      {left hook}-{Triangle}
    },
    embedding*/.style = {
      {left hook}-&gt;
    },
    open immersion*/.style = {
      {left hook}-{Triangle[open]}
    },
    exists/.style = {
      densely dashed
    },
    equal/.style = {
      double
    }
  }

  \newenvironment{morphism}{\begin{scope}[every node/.style={morphism}]}{\end{scope}}

  \newlength{\dontworryaboutit}

  \tikzset{
    inline diagram/.style = {
      commutative diagrams/every diagram,
      commutative diagrams/cramped,
      line width = .5pt,
      every node/.append style = {
        commutative diagrams/every cell,
        anchor = base,
        inner sep = 0pt
      },
      every path/.append style = {
        outer xsep = 2pt
      }
    }
  }

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Primitives for drawing commutative squares
  \tikzset{
    square/nw/.style = {},
    square/ne/.style = {},
    square/se/.style = {},
    square/sw/.style = {},
    square/north/.style = {-&gt;},
    square/south/.style = {-&gt;},
    square/west/.style = {-&gt;},
    square/east/.style = {-&gt;},
    square/north/node/.style = {above},
    square/south/node/.style = {below},
    square/west/node/.style = {left},
    square/east/node/.style = {right},
  }

  \ExplSyntaxOn

  \bool_new:N \l_jon_glue_west

  \keys_define:nn { jon-tikz/diagram } {
    nw .tl_set:N = \l_jon_tikz_diagram_nw,
    sw .tl_set:N = \l_jon_tikz_diagram_sw,
    ne .tl_set:N = \l_jon_tikz_diagram_ne,
    se .tl_set:N = \l_jon_tikz_diagram_se,

    width .tl_set:N = \l_jon_tikz_diagram_width,
    height .tl_set:N = \l_jon_tikz_diagram_height,

    north .tl_set:N = \l_jon_tikz_diagram_north,
    south .tl_set:N = \l_jon_tikz_diagram_south,
    west .tl_set:N = \l_jon_tikz_diagram_west,
    east .tl_set:N = \l_jon_tikz_diagram_east,

    nw/style .code:n = {\tikzset{square/nw/.style = {#1}}},
    sw/style .code:n = {\tikzset{square/sw/.style = {#1}}},
    ne/style .code:n = {\tikzset{square/ne/.style = {#1}}},
    se/style .code:n = {\tikzset{square/se/.style = {#1}}},

    glue .choice:,
    glue / west .code:n = {\bool_set:Nn \l_jon_glue_west \c_true_bool},

    glue~target .tl_set:N = \l_jon_tikz_glue_target,

    north/style .code:n = {\tikzset{square/north/.style = {#1}}},
    north/node/style .code:n = {\tikzset{square/north/node/.style = {#1}}},
    south/style .code:n = {\tikzset{square/south/.style = {#1}}},
    south/node/style .code:n = {\tikzset{square/south/node/.style = {#1}}},
    west/style .code:n = {\tikzset{square/west/.style = {#1}}},
    west/node/style .code:n = {\tikzset{square/west/node/.style = {#1}}},
    east/style .code:n = {\tikzset{square/east/.style = {#1}}},
    east/node/style .code:n = {\tikzset{square/east/node/.style = {#1}}},

    draft .meta:n = {
      nw = {\__jon_tikz_diagram_fmt_placeholder:n {nw}},
      sw = {\__jon_tikz_diagram_fmt_placeholder:n {sw}},
      se = {\__jon_tikz_diagram_fmt_placeholder:n {se}},
      ne = {\__jon_tikz_diagram_fmt_placeholder:n {ne}},
      north = {\__jon_tikz_diagram_fmt_placeholder:n {north}},
      south = {\__jon_tikz_diagram_fmt_placeholder:n {south}},
      west = {\__jon_tikz_diagram_fmt_placeholder:n {west}},
      east = {\__jon_tikz_diagram_fmt_placeholder:n {east}},
    }
  }

  \tl_set:Nn \l_jon_tikz_diagram_width { 2cm }
  \tl_set:Nn \l_jon_tikz_diagram_height { 2cm }


  \cs_new:Npn \__jon_tikz_diagram_fmt_placeholder:n #1 {
    \texttt{\textcolor{red}{#1}}
  }

  \keys_set:nn { jon-tikz/diagram } {
    glue~target = {},
  }


  \cs_new:Nn \__jon_tikz_render_square:nn {
    \group_begin:
    \keys_set:nn {jon-tikz/diagram} {#2}
    \bool_if:nTF \l_jon_glue_west {
      \node (#1ne) [right = \l_jon_tikz_diagram_width~of~\l_jon_tikz_glue_target ne,square/ne] {$\l_jon_tikz_diagram_ne$};
      \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
      \begin{morphism}
        \draw[square/north] (\l_jon_tikz_glue_target ne) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
        \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
        \draw[square/south] (\l_jon_tikz_glue_target se) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
      \end{morphism}
    } {
      \node (#1nw) [square/nw] {$\l_jon_tikz_diagram_nw$};
      \node (#1sw) [below = \l_jon_tikz_diagram_height~of~#1nw,square/sw] {$\l_jon_tikz_diagram_sw$};
      \begin{morphism}
        \draw[square/west] (#1nw) to node [square/west/node] {$\l_jon_tikz_diagram_west$} (#1sw);
      \end{morphism}

      \node (#1ne) [right = \l_jon_tikz_diagram_width~of~#1nw,square/ne] {$\l_jon_tikz_diagram_ne$};
      \node (#1se) [below = \l_jon_tikz_diagram_height~of~#1ne,square/se] {$\l_jon_tikz_diagram_se$};
      \begin{morphism}
        \draw[square/north] (#1nw) to node [square/north/node] {$\l_jon_tikz_diagram_north$} (#1ne);
        \draw[square/east] (#1ne) to node [square/east/node] {$\l_jon_tikz_diagram_east$} (#1se);
        \draw[square/south] (#1sw) to node [square/south/node] {$\l_jon_tikz_diagram_south$} (#1se);
      \end{morphism}
    }
    \group_end:
  }

  \NewDocumentCommand\SpliceDiagramSquare{D&lt;&gt;{}m}{
    \__jon_tikz_render_square:nn {#1} {#2}
  }


  \NewDocumentCommand\DiagramSquare{D&lt;&gt;{}O{}m}{
    \begin{tikzpicture}[diagram,#2,baseline=(#1sw.base)]
      \__jon_tikz_render_square:nn {#1} {#3}
    \end{tikzpicture}
  }

  \ExplSyntaxOff
  %
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Primitives for drawing adjunction diagrams
  \tikzset{
    adj/w/.style = {},
    adj/e/.style = {},
    adj/left/.style = {-&gt;},
    adj/right/.style = {-&gt;},
    adj/left/node/.style = {above},
    adj/right/node/.style = {below},
  }

  \ExplSyntaxOn

  \bool_new:N \l_fnd_glue_west

  \keys_define:nn { fnd-tikz/adj-diagram } {
    w .tl_set:N = \l_fnd_tikz_adj_diagram_w,
    e .tl_set:N = \l_fnd_tikz_adj_diagram_e,

    width .tl_set:N = \l_fnd_tikz_adj_diagram_width,

    left .tl_set:N = \l_fnd_tikz_adj_diagram_left,
    right .tl_set:N = \l_fnd_tikz_adj_diagram_right,

    glue .choice:,
    glue / west .code:n = {\bool_set:Nn \l_fnd_glue_west \c_true_bool},
    glue~target .tl_set:N = \l_fnd_tikz_glue_target,

    w/style .code:n = {\tikzset{adj/w/.style = {#1}}},
    e/style .code:n = {\tikzset{adj/e/.style = {#1}}},

    left/style .code:n = {\tikzset{adj/left/.style = {#1}}},
    left/node/style .code:n = {\tikzset{adj/left/node/.style = {#1}}},
    right/style .code:n = {\tikzset{adj/right/.style = {#1}}},
    right/node/style .code:n = {\tikzset{adj/right/node/.style = {#1}}},

    draft .meta:n = {
      e = {\__fnd_tikz_adj_diagram_fmt_placeholder:n {e}},
      w = {\__fnd_tikz_adj_diagram_fmt_placeholder:n {w}},
      left = {\__fnd_tikz_adj_diagram_fmt_placeholder:n {left}},
      right = {\__fnd_tikz_adj_diagram_fmt_placeholder:n {right}},
    }
  }

  \tl_set:Nn \l_fnd_tikz_adj_diagram_width { 2cm }

  \cs_new:Npn \__fnd_tikz_adj_diagram_fmt_placeholder:n #1 {
    \texttt{\textcolor{red}{#1}}
  }

  \keys_set:nn { fnd-tikz/adj-diagram } {
    glue~target = {},
  }

  \cs_new:Nn \__fnd_tikz_render_adj_diagram:n {
    \group_begin:
    \keys_set:nn {fnd-tikz/adj-diagram} {#1}
    % gluing will be implemented when I need it
    \bool_if:nTF \l_fnd_glue_west {
      \node (w) [adj/w] {$\l_fnd_tikz_adj_diagram_w$};
      \node (e) [right=\l_fnd_tikz_adj_diagram_width~of~w,adj/e] {$\l_fnd_tikz_adj_diagram_e$};
      \begin{morphism}
        \draw [-&gt;] ([yshift=.15cm]e.west) to node[adj/left/node] (n) {$\l_fnd_tikz_adj_diagram_left$} ([yshift=.15cm]w.east);
        \draw [-&gt;] ([yshift=-.15cm]w.east) to node[adj/right/node] (s) {$\l_fnd_tikz_adj_diagram_right$} ([yshift=-.15cm]e.west);
        \path (s) to node[rotate=-90] {$\dashv$} (n);
      \end{morphism}
    } {
      \node (w) [adj/w] {$\l_fnd_tikz_adj_diagram_w$};
      \node (e) [right=\l_fnd_tikz_adj_diagram_width~of~w,adj/e] {$\l_fnd_tikz_adj_diagram_e$};
      \begin{morphism}
        \draw [-&gt;] ([yshift=.15cm]e.west) to node[adj/left/node] (n) {$\l_fnd_tikz_adj_diagram_left$} ([yshift=.15cm]w.east);
        \draw [-&gt;] ([yshift=-.15cm]w.east) to node[adj/right/node] (s) {$\l_fnd_tikz_adj_diagram_right$} ([yshift=-.15cm]e.west);
        \path (s) to node[rotate=-90] {$\dashv$} (n);
      \end{morphism}
    }
    \group_end:
  }

  \NewDocumentCommand\AdjDiagram{m}{
    \begin{tikzpicture}[diagram]
      \__fnd_tikz_render_adj_diagram:n {#1}
    \end{tikzpicture}
  }
  
  \ExplSyntaxOff
  %
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
  </fr:embedded-tex-preamble><fr:embedded-tex-body>
   \AdjDiagram {
    w =  
   \mathsf { E } 
 ,
    e =  
   \mathsf { F } 
 ,
    left =  f ^{{*}} ,
    right =  f _{{*}} ,
  }
</fr:embedded-tex-body></fr:embedded-tex>
 
<fr:p>such that <fr:tex>f ^{{*}}</fr:tex> is left exact. The functors <fr:tex>f _{{*}}</fr:tex> and <fr:tex>f ^{{*}}</fr:tex> are called the <fr:em><fr:strong>direct image</fr:strong></fr:em> and the <fr:em><fr:strong>inverse image</fr:strong></fr:em> respectively.</fr:p></fr:mainmatter></fr:tree><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>338</fr:anchor><fr:taxon>Definition</fr:taxon><fr:addr>topo-0002</fr:addr><fr:route>topo-0002.xml</fr:route><fr:title>Logical functor</fr:title><fr:date><fr:year>2024</fr:year><fr:month>5</fr:month><fr:day>27</fr:day></fr:date><fr:authors><fr:author><fr:link
href="frankndrssn.xml"
type="local"
addr="frankndrssn">Frank Tsai</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex>    \mathsf { E }  </fr:tex> and <fr:tex>    \mathsf { F }  </fr:tex> be <fr:link
href="topo-0001.xml"
type="local"
addr="topo-0001">topoi</fr:link>. A <fr:em><fr:strong>logical functor</fr:strong></fr:em> <fr:tex>{ F }:{     \mathsf { E }   } \to {     \mathsf { F }   }</fr:tex> is a functor preserving finite limits, exponentials, and the subobject classifier.</fr:p></fr:mainmatter></fr:tree></fr:backlinks><fr:references></fr:references></fr:backmatter></fr:tree>